#
# GNU Makefile for dump1090 (x86/x64, MSVC or clang-cl).
#
# By G. Vanem <gvanem@yahoo.no> 2021 - 2025.
#
# Ref: https://github.com/gvanem/Dump1090.git
#
TODAY      = $(shell date +%d-%B-%Y)
YEAR       = $(shell date +%Y)
THIS_FILE  = Makefile.Windows
MAKEFLAGS += --warn-undefined-variables

#
# Choose your weapons:
#
# Use CRT debug-mode.
#
USE_CRT_DEBUG ?= 0

#
# Use '../tools/gen_data.py' to generate these:
#   $(TEMP)/dump1090/standing-data/results/aircrafts.bin
#   $(TEMP)/dump1090/standing-data/results/airports.bin
#   $(TEMP)/dump1090/standing-data/results/routes.bin
#   $(TEMP)/dump1090/standing-data/results/code-blocks.bin
#
USE_BIN_FILES ?= 0

#
# Option for polling of network events in 'externals/mongoose.c':
#   USE_NET_POLLER=WSAPOLL: use 'WSAPoll()'
#   USE_NET_POLLER=SELECT:  use 'select()'
#
USE_NET_POLLER ?= WSAPOLL

#
# Enable bundling *all* web_root pages inside '../web-pages.dll' as multiple resources.
# Use e.g. as '../web-pages.dll;2' for '../web_root-FlightAware/*' as web-root.
#
USE_PACKED_DLL ?= 0

#
# Use 'externals/PDC-mod' instead of 'externals/Curses'.
# The 'externals/PDC-mod/*' files is a minimal WinCon version scraped
# from https://github.com/Bill-Gray/PDCursesMod.git
#
USE_PDC_MOD ?= 1

#
# Enable "Address Sanitation".
# This needs an up-to-date version of 'cl'.
#
# Does not work with 'USE_CRT_DEBUG = 1' and 'CC = clang-cl'.
# But 'USE_CRT_DEBUG = 1' and 'CC = cl' works.
#
USE_ASAN ?= 0

#
# Compile using 'cl -MP ...'. For MSVC only.
#
USE_MP_COMPILE ?= 0

#
# For my private build; use the tracing Winsock library?
# Ref:
#   https://github.com/gvanem/wsock-trace/
#
USE_WSOCK_TRACE ?= 0

#
# Enable 'astyle' in .c-file preprocessing.
#
USE_ASTYLE ?= 1

#
# Python is needed for:
#   *) .c-file preprocessing.
#   *) generation of '$(OBJ_DIR)/web-pages-*.c'.
#   *) and in the 'link_EXE()' macro.
#
PYTHON ?= py -3

#
# Change the 'CLANG_[32|64]' directory to suite:
# Only important if 'USE_ASAN = 1' with 'CC = clang-cl'.
#
CLANG_32        ?= c:/ProgramFiles/LLVM-15-32bit
CLANG_64        ?= c:/ProgramFiles/LLVM-15-64bit
CLANG_MAJOR_VER ?= 15

define Usage

  Usage: "make -f $(THIS_FILE) [CC=cl | clang-cl] <CPU=x86 | x64> [all | clean | vclean | depend]")
  Specify CC=cl       - build with MSVC
  Specify CC=clang-cl - build with clang-cl
  Specify CPU=x86     - build for 32-bit
  Specify CPU=x64     - build for 64-bit
endef

#
# Undefine any '%CL%' env-var
#
export CL=

#
# Undefine any gcc include-path env-vars since
# it could confuse clang-cl.
#
export C_INCLUDE_PATH=
export CPLUS_INCLUDE_PATH=

OBJ_DIR = objects

c_to_obj = $(addprefix $(OBJ_DIR)/, $(notdir $(1:.c=.obj)))

ifneq ($(CC),cl)
  ifneq ($(CC),clang-cl)
    $(error $(Usage))
  endif
endif

#
# The CFLAGS + LDFLAGS used. Printed on '../dump1090.exe -VV'.
#
GENERATED = $(OBJ_DIR)/cflags_$(CC).h \
            $(OBJ_DIR)/ldflags_$(CC).h

CFLAGS = -nologo -c -Zi -W4        \
         -FI./dump1090_config.h    \
         -Fd./$(OBJ_DIR)/vc14x.pdb \
         -I.                       \
         -I./externals             \
         -I./$(OBJ_DIR)

#
# Showing airport names correctly in `--interactive' mode needs
# Wide-string and UTF8 in Curses.
#
CFLAGS += -DPDC_WIDE -DPDC_FORCE_UTF8

#
# To enable the Ncurses mouse API.
#
CFLAGS += -DPDC_NCMOUSE

#
# Handling of 'volatile' variables:
#   https://learn.microsoft.com/en-us/cpp/build/reference/volatile-volatile-keyword-interpretation?view=msvc-170
#
CFLAGS += -volatile:iso

LDFLAGS = -nologo -map -debug -verbose    \
          -incremental:no -machine:$(CPU) \
          -nodefaultlib:oldnames.lib      \
          -nodefaultlib:libcmt.lib        \
          -nodefaultlib:sapi.lib          \
          -nodefaultlib:uuid.lib

RCFLAGS = -nologo

ifeq ($(USE_CRT_DEBUG),1)
  CFLAGS  += -MDd -GS -Oy- -RTCu -RTCs
  RCFLAGS += -D_DEBUG
else
  CFLAGS += -MD -GS- -Zo -Oy- -Ox -Gs0
endif

ifeq ($(CC),clang-cl)
  CFLAGS += -fms-compatibility \
            -ferror-limit=5    \
            -Wno-unused-command-line-argument
  RCFLAGS += -D__clang__
  gen_data_arg = -c
else
  RCFLAGS += -D_MSC_VER
  gen_data_arg =
endif

ifeq ($(USE_BIN_FILES),1)
  CFLAGS += -DUSE_BIN_FILES
endif

ifeq ($(USE_PDC_MOD),1)
  CFLAGS     += -DUSE_PDC_MOD
  CURSES_ROOT = externals/PDC-Mod
else
  CURSES_ROOT = externals/Curses
endif

CFLAGS += -I./$(CURSES_ROOT)


#
# If '$(CPU)=x64', build 64-bit targets. Otherwise 32-bit targets.
#
ifeq ($(CPU),x64)
  BITS   := 64
  SUFFIX := x86_64

else ifeq ($(CPU),x86)
  BITS   := 32
  SUFFIX := i386

else
  $(error Add an env-var 'CPU=x64' (or 'CPU=x86') depending on the active compiler.)
endif

OS_LIBS   = advapi32.lib dnsapi.lib iphlpapi.lib ole32.lib setupapi.lib shlwapi.lib uuid.lib user32.lib winusb.lib
ASAN_LIBS =
COPY_DLLs =

#
# ASAN build settings:
#
# This works best:
#   c:\> set ASAN_OPTIONS=print_stats=1:windows_hook_legacy_allocators=1:color=always:halt_on_error=0
#
# A ':log_path=c:/temp/dump1090/ASAN.log' too could be useful.
#
# Refs:
#   https://docs.microsoft.com/en-us/cpp/sanitizers/asan?view=msvc-160
#   https://github.com/google/sanitizers/wiki/AddressSanitizer
#   https://github.com/google/sanitizers/wiki/AddressSanitizerFlags
#
ifeq ($(USE_ASAN),1)
  CFLAGS  += -DUSE_ASAN -fsanitize=address
  RCFLAGS += -DUSE_ASAN

  ifeq ($(CC),clang-cl)
    ASAN_LIBS = clang_rt.asan_dynamic-$(SUFFIX).lib \
                clang_rt.asan_dynamic_runtime_thunk-$(SUFFIX).lib \
                kernel32.lib
  endif

  #
  # ASAN with clang-cl is a bit tricky with regard to linking;
  # Use an explicit '-libpath:' for it. Since a Visual-Studio .DLL
  # for ASAN could have missing imports needed by 'USE_ASAN=1'.
  #
  # Hence copy the needed .DLL over to current directory (and remove it on a 'make clean').
  #
  ifeq ($(CC),clang-cl)
    ifeq ($(CLANG_MAJOR_VER),)
      $(error 'CLANG_MAJOR_VER' must be set in your environment.)
    endif

    $(info Detected 'CLANG_ROOT=$(realpath $(CLANG_$(BITS)))' for 'USE_ASAN=$(USE_ASAN)'.)

    #
    # The default for 'x86 / Release' is 'clang_rt.asan_dynamic_runtime_thunk-i386.lib'
    # (and clang_rt.asan_dbg_dynamic_runtime_thunk-i386.lib for 'x86 / Debug')
    #
    LDFLAGS += -libpath:$(realpath $(CLANG_$(BITS)))/lib/clang/$(CLANG_MAJOR_VER)/lib/windows

    COPY_DLLs = $(realpath $(CLANG_$(BITS)))/lib/clang/$(CLANG_MAJOR_VER)/lib/windows/clang_rt.asan_dynamic-$(SUFFIX).dll

  else
    COPY_DLLs = $(TOOLS_ROOT)/bin/HostX64/$(CPU)/clang_rt.asan_dynamic-$(SUFFIX).dll
  endif
endif

RCFLAGS += -DRC_BITS=$(BITS)

ifeq ($(USE_WSOCK_TRACE),1)
  OS_LIBS += wsock_trace-$(CPU).lib
  LDFLAGS += -nodefaultlib:ws2_32.lib
else
  OS_LIBS += ws2_32.lib
endif

#
# What to build:
#
TARGETS = ../dump1090.exe

SOURCES = aircraft.c    \
          airports.c    \
          cfg_file.c    \
          color.c       \
          convert.c     \
          cpr.c         \
          crc.c         \
          csv.c         \
          demod-2000.c  \
          demod-2400.c  \
          demod-8000.c  \
          dump1090.c    \
          fifo.c        \
          geo.c         \
          infile.c      \
          interactive.c \
          location.c    \
          misc.c        \
          net_io.c      \
          pconsole.c    \
          smartlist.c   \
          speech.c

vpath %.c externals         \
          externals/AirSpy  \
          externals/SDRplay \
          $(CURSES_ROOT)

SOURCES += $(addprefix externals/, \
             mongoose.c            \
             sqlite3.c             \
             zip.c                 \
             AirSpy/airspy.c       \
             SDRplay/sdrplay.c)    \
                                   \
           $(CURSES_ROOT)/amalgamation.c

vpath %.c externals/rtl-sdr

SOURCES += $(addprefix externals/rtl-sdr/, \
             librtlsdr.c                   \
             trace.c                       \
             tuner_e4k.c                   \
             tuner_fc001x.c                \
             tuner_fc2580.c                \
             tuner_r82xx.c)

#
# For '../web-pages.dll':
#
WEB_SUFFIXES ?= 1 2 3 4 5

WEB_SRC := $(addsuffix .c, \
             $(addprefix $(OBJ_DIR)/web-page-, $(WEB_SUFFIXES)))

ifeq ($(USE_PACKED_DLL),1)
  vpath %.rc $(OBJ_DIR)

  TARGETS   += ../web-pages.dll
  CFLAGS    += -DUSE_PACKED_DLL
  GENERATED += $(WEB_SRC)
endif

ifeq ($(USE_NET_POLLER),WSAPOLL)
  CFLAGS += -DMG_ENABLE_POLL=1

else ifeq ($(USE_NET_POLLER),SELECT)
  #
  # No code checks for this, but for '../dump1090.exe -VV' only
  #
  CFLAGS += -DMG_ENABLE_SELECT=1

else
  $(error Illegal 'USE_NET_POLLER=$(USE_NET_POLLER)' value)
endif

OBJECTS = $(call c_to_obj, $(SOURCES))
WEB_OBJ = $(call c_to_obj, $(WEB_SRC))

vpath %.c ../tools

PACKED_TEST_SRC = ../tools/packed_webfs_main.c \
                  $(OBJ_DIR)/packed_webfs_1.c  \
                  $(OBJ_DIR)/packed_webfs_2.c  \
                  misc.c                       \
                  smartlist.c

PACKED_TEST_OBJ = $(call c_to_obj, $(PACKED_TEST_SRC))

#
# Select correct compiler and libpaths without the 'vcvarsall.bat' non-sense.
#
# E.g.:
#  'VCToolkitInstallDir=c:\dev\VC_2019\VC\Tools\MSVC\14.38.32919' -- the root of the MSVC tools.
#  'WindowsSdkDir=c:\ProgramFiles-x86\Windows-Kits'               -- the root of the 'WindowsKits' API.
#  'WindowsSdkVer=10.0.19041.0'                                   -- the 'WindowsKits' version.
#
TOOLS_ROOT = $(realpath $(VCToolkitInstallDir))

#
# If building on AppVeyor
#
APPVEYOR_PROJECT_NAME ?=

ifneq ($(APPVEYOR_PROJECT_NAME),)
  _CC = $(CC)

  ifeq ($(CC),cl)
    CFLAGS += -wd4054 -wd4055 -wd4204 -wd4221
  else
    CFLAGS += -Wno-unknown-warning-option
  endif

  WindowsSdkDir =
  WindowsSdkVer =

else
  ifeq ($(CC),clang-cl)
    _CC = $(realpath $(CLANG_$(BITS)))/bin/clang-cl.exe
  else
    _CC = $(TOOLS_ROOT)/bin/HostX64/$(CPU)/cl.exe
  endif

  #
  # The path for the CRT libraries.
  #
  LDFLAGS += -libpath:$(TOOLS_ROOT)/lib/$(CPU)

  #
  # The path for the "Windows Kit" libraries.
  #
  # E.g. the User-Mode libraries for 'x86' are in:
  #   $(WindowsSdkDir)/Lib/$(WindowsSdkVer)/um/x86/
  #
  LDFLAGS += -libpath:$(realpath $(WindowsSdkDir))/Lib/$(WindowsSdkVer)/um/$(CPU)

  #
  # The path for the "Universal CRT" (UCRT) libraries.
  #
  # E.g. the UCRT libraries for 'x86' are in:
  #   $(WindowsSdkDir)/Lib/$(WindowsSdkVer)/ucrt/x86/
  #
  LDFLAGS += -libpath:$(realpath $(WindowsSdkDir))/Lib/$(WindowsSdkVer)/ucrt/$(CPU)
endif

all: $(GENERATED) $(TARGETS) DLL_copy
	$(call green_msg, Welcome to Dump1090.)

$(OBJ_DIR) doxy-docs:
	- mkdir $@

../dump1090.exe: $(OBJECTS) $(OBJ_DIR)/dump1090.res
	$(call link_EXE, $@, $^ $(OS_LIBS) $(ASAN_LIBS))

../color_test.exe: $(OBJ_DIR)/color_test.obj
	$(call link_EXE, $@, $^ $(ASAN_LIBS))

../utf8_test.exe: $(OBJ_DIR)/utf8_test.obj
	$(call link_EXE, $@, $^ -nodefaultlib:ws2_32.lib $(ASAN_LIBS))

ifeq ($(USE_BIN_FILES),1)
  #
  # In case 'make.exe' is a MSys make, the value of '$(realpath $(TEMP))'
  # becomes something like '/c/temp' which if not understood by '$(CC)'.
  # Hence use an 'c:/temp/dump1090/standing-data/results' explicitly.
  # Change to suite.
  #
  BIN_DIR = $(realpath $(TEMP))/dump1090/standing-data/results

  ../blocks_test.exe: $(OBJ_DIR)/gen-code-blocks.obj
	$(call link_EXE, $@, $^ -nodefaultlib:ws2_32.lib $(ASAN_LIBS))

  $(OBJ_DIR)/gen-code-blocks.obj: $(OBJ_DIR)/gen-code-blocks.c | $(CC).args
	$(call C_compile, $@, -DTEST_CODE_BLOCKS $<)

  $(OBJ_DIR)/gen-code-blocks.c \
  $(BIN_DIR)/gen_data.h        \
  $(BIN_DIR)/code-blocks.bin: ../tools/gen_data.py | $(OBJ_DIR)
	$(call green_msg, Generating $(BRIGHT_WHITE)$@)
	$(PYTHON) $< $(gen_data_arg) --gen-c $(OBJ_DIR)/gen-code-blocks.c
	cp --update $(BIN_DIR)/gen_data.h $(OBJ_DIR)/
endif

../sqlite3.exe: $(OBJ_DIR)/sqlite3.obj $(OBJ_DIR)/sqlite3-shell.obj
	$(call link_EXE, $@, $^ $(ASAN_LIBS))

$(OBJ_DIR)/sqlite3-shell.obj: externals/sqlite3-shell.c | $(CC).args $(OBJ_DIR)
	$(call C_compile, $@, -DCOMPILING_SQLITE3_SHELL $<)

../web-pages.dll: $(WEB_OBJ) $(OBJ_DIR)/web-pages.res
	$(call link_web_DLL, $@, $^ oldnames.lib $(ASAN_LIBS), $(WEB_SUFFIXES))

$(OBJ_DIR)/web-pages.rc: $(THIS_FILE)
	$(call generate, $@, //)
	$(file >> $@,$(web_pages_RC))

$(OBJ_DIR)/%.res: %.rc
	$(call create_res_file, $@, $<)

ifeq ($(CC)-$(USE_MP_COMPILE),cl-1)
  $(OBJECTS): $(SOURCES) | $(CC).args $(OBJ_DIR)
	$(call green_msg, Compiling $(words $(SOURCES)) .c-files in one go...)
	$(call C_compile, $(OBJ_DIR)\\, -MP $(SOURCES))

else
  $(OBJ_DIR)/sqlite3.obj: externals/sqlite3.c | $(CC).args $(OBJ_DIR)
	$(call C_compile_long_time, $@, $<)
endif

$(OBJ_DIR)/%_test.obj: %.c | $(CC).args $(OBJ_DIR)
	$(call C_compile, $@, -DTEST $<)

$(OBJ_DIR)/%.obj: %.c | $(CC).args $(OBJ_DIR)
	$(call C_compile, $@, $<)

OpenLayers3_ARGS = --ignore "../web_root-OpenLayers3/3d/*" \
                   --ignore "../web_root-OpenLayers3/sql/*"

$(OBJ_DIR)/web-page-1.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root, 1,)

$(OBJ_DIR)/web-page-2.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-FlightAware, 2,)

$(OBJ_DIR)/web-page-3.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3, 3, $(OpenLayers3_ARGS))

$(OBJ_DIR)/web-page-4.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3/3d, 4,)

$(OBJ_DIR)/web-page-5.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-Tar1090, 5,)

$(OBJ_DIR)/web-page-%.obj: $(OBJ_DIR)/web-page-%.c | $(CC).args
	$(call C_compile_long_time, $@, $<)

$(OBJ_DIR)/packed_webfs_1.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3, 1, $(OpenLayers3_ARGS))

$(OBJ_DIR)/packed_webfs_2.c: ../tools/gen_packed_fs.py
	$(call generate_web_page, $@, ../web_root-OpenLayers3, 2, $(OpenLayers3_ARGS) --minify)

#
# Test the output of the non-minified and minified '$(OBJ_DIR)/packed_webfs*.c' files.
#
$(OBJ_DIR)/packed_webfs_%.obj: $(OBJ_DIR)/packed_webfs_%.c | $(CC).args
	$(call C_compile_long_time, $@, $<)

../packed_test.exe: $(PACKED_TEST_OBJ)
	$(call link_EXE, $@, $^ $(ASAN_LIBS) advapi32.lib shlwapi.lib)

../speech_test.exe: $(OBJ_DIR)/speech_test.obj $(OBJ_DIR)/misc.obj $(OBJ_DIR)/mongoose.obj $(OBJ_DIR)/smartlist.obj
	$(call link_EXE, $@, $^ $(ASAN_LIBS) ole32.lib shlwapi.lib)

$(CC).args: $(THIS_FILE)
	$(call green_msg, All common CFLAGS are in $(BRIGHT_WHITE)$@)
	$(call create_resp_file, $@, $(CFLAGS))

#
# Not needed since 'favicon.c' is not in 'make clean'.
# Cannot assume everybody has the 'xxd' program.
#
gen_favicons: favicon.png favicon.ico
	$(call generate, favicon.c, //)
	@echo -e '\n// Generated array from favicon.png' >> favicon.c
	xxd -i favicon.png >> favicon.c
	@echo -e '\n// Generated array from favicon.ico' >> favicon.c
	xxd -i favicon.ico >> favicon.c
	@echo

#
# For '../dump1090.exe -VV':
#
$(OBJ_DIR)/cflags_$(CC).h: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_cflags_h, $@, $(_CC) $(CFLAGS))

$(OBJ_DIR)/ldflags_$(CC).h: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate_ldflags_h, $@, link $(LDFLAGS) -out:dump1090.exe $(OBJECTS) $(OBJ_DIR)/dump1090.res $(OS_LIBS) $(ASAN_LIBS))

docs: doxy-docs doxy-docs/Doxyfile
	$(call green_white_msg, Running, doxygen doxy-docs/Doxyfile)
	cd $< ; doxygen Doxyfile
	$(call green_white_msg, Generating, $</dump1090.chm)
	- ( cd $< ; hhc index.hhp )
	mv --force $</dump1090.chm ..
	$(call green_white_msg, Done generating Doxygen docs and, ../dump1090.chm)

docs_clean:
	rm -fr doxy-docs
	rm -f ../dump1090.chm

doxy-docs/Doxyfile: doxy-docs $(THIS_FILE)
	$(call generate, $@, #)
	$(file >> $@,$(DUMP1090_DOXYFILE))

speech_test.i: speech.c $(OBJ_DIR)/cpp-filter.py $(CC).args FORCE
	$(call C_preprocess, $@, -DTEST $<)

%.i: %.c $(OBJ_DIR)/cpp-filter.py $(CC).args FORCE
	$(call C_preprocess, $@, $<)

FORCE:

$(OBJ_DIR)/cpp-filter.py: $(THIS_FILE) | $(OBJ_DIR)
	$(call generate, $@, #)
	$(file >> $@,if 1:)
	$(file >> $@,$(CPP_FILTER_PY))

#
# Copy the needed .DLL:
#
ifeq ($(COPY_DLLs),)
  DLL_copy:
	$(call green_msg, No .DLLs to copy)
else
  DLL_copy:
	$(call green_msg, Copying '$(COPY_DLLs)' to CWD)
	cp --update $(COPY_DLLs) .
endif

DLL_clean:
	rm -f clang_rt.asan_dynamic*.dll

#
# Clean up after Visual-Studio
#
VS_clean:
	rm -f vc14*.pdb
	rm -fr .vs x64 x86 Dump1090

#
# '$(sort ..)' will create a unique list.
#
TARGETS_JUNK = $(sort $(TARGETS:.exe=.map)     \
                      $(TARGETS:.exe=.pdb)     \
                      $(TARGETS:.exe=.exp)     \
                      $(TARGETS:.exe=.lib)     \
                      ../blocks_test.{map,pdb} \
                      ../color_test.{map,pdb}  \
                      ../packed_test.{map,pdb} \
                      ../speech_test.{map,pdb} \
                      ../utf8_test.{map,pdb}   \
                      ../sqlite3.{map,pdb}     \
                      ../web-pages.{map,pdb})

OTHER_JUNK = link.tmp link.args cl.args clang-cl.args

clean: docs_clean DLL_clean VS_clean
	rm -f $(TARGETS_JUNK) $(OTHER_JUNK)
	rm -f $(OBJ_DIR)/*.obj $(OBJ_DIR)/*.res
	- @rmdir $(OBJ_DIR) 2>/dev/null

realclean vclean: clean
	rm -f $(TARGETS) ../blocks_test.exe ../color_test.exe ../packed_test.exe ../speech_test.exe ../utf8_test.exe ../sqlite3.exe ../web-pages.dll .depend.Windows
	rm -fr $(OBJ_DIR)

#
# GNU-make macros:
#
# This assumes you have an MSys/Cygwin 'echo.exe' with colour support.
#
BRIGHT_GREEN = \e[1;32m
BRIGHT_WHITE = \e[1;37m

green_msg       = @echo -e "$(BRIGHT_GREEN)$(strip $(1))\e[0m"
green_white_msg = $(call green_msg, $(1) $(BRIGHT_WHITE)$(strip $(2)) $(BRIGHT_GREEN)...)

define C_compile
  $(_CC) @$(CC).args -Fo./$(strip $(1) $(2))
  @echo
endef

define C_compile_long_time
  $(call green_msg, Compiling $(BRIGHT_WHITE)$(strip $(1)) $(BRIGHT_GREEN)will take some time...)
  $(_CC) @$(CC).args -Fo./$(strip $(1) $(2))
  @echo
endef

define create_res_file
  rc $(RCFLAGS) -fo $(strip $(1) $(2))
  @echo
endef

define create_resp_file
  $(file > $(1))
  $(foreach f, $(2), $(file >> $(1),$(strip $(f))) )
endef

define link_EXE
  $(file  > $(OBJ_DIR)/check-for-unused-libs.py,if 1:)
  $(file >> $(OBJ_DIR)/check-for-unused-libs.py,$(CHECK_FOR_UNUSED_LIBS_PY))
  $(call green_msg, Linking $(BRIGHT_WHITE)$(strip $(1)))
  $(call create_resp_file, link.args, $(LDFLAGS) $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.exe=.map)
  @rm -f $(1:.exe=.exp) $(1:.exe=.lib)
  @$(PYTHON) $(OBJ_DIR)/check-for-unused-libs.py link.tmp
endef

define func_exports
  $(foreach e, $(1), -export:mg_unpack_$(e))
  $(foreach e, $(1), -export:mg_unlist_$(e))
endef

define link_web_DLL
  $(call green_msg, Linking $(BRIGHT_WHITE)$(strip $(1)))
  $(call create_resp_file, link.args, -dll $(LDFLAGS) $(call func_exports, $(3)) $(2))
  link -out:$(strip $(1)) @link.args > link.tmp
  @cat link.tmp >> $(1:.dll=.map)
  @rm -f $(1:.dll=.exp) $(1:.dll=.lib)
endef

define Warning
  $(1)
  $(1) DO NOT EDIT! This file was automatically generated
  $(1) from $(CURDIR)/$(THIS_FILE) at $(TODAY).
  $(1) Edit that file instead.
  $(1)
endef

define generate
  $(call green_msg, Generating $(BRIGHT_WHITE)$(strip $(1)))
  $(file > $(1),$(call Warning,$(strip $(2))))
endef

define generate_cflags_h
  $(call generate, $(1),//)
  $(file >> $(1),const char *cflags = "$(strip $(2))";)
endef

define generate_ldflags_h
  $(call generate, $(1),//)
  $(file >> $(1),const char *ldflags = "$(strip $(2))";)
endef

#
# Ignore any temp-files matching "t.*"
#
define generate_web_page
  $(call green_msg, Generating $(BRIGHT_WHITE)$(strip $(1)))
  $(PYTHON) ../tools/gen_packed_fs.py --outfile $(strip $(1) --verbose --recursive \
            --suffix=_$(strip $(3)) --ignore "t.*" $(4) --strip $(2)/ $(2)/)
  @echo
endef

#
# clang-cl: /d1PP  Retain macro definitions in /E mode
#
ifeq ($(CC),clang-clX)
  d1PP = -d1PP
else
  d1PP =
endif

ifeq ($(USE_ASTYLE),1)
  C_FORMATER = | astyle
else
  C_FORMATER =
endif

define C_preprocess
  $(call green_msg, Preprocessing $(BRIGHT_WHITE)$(strip $(2)))
  $(file  > $(1),/* The result of preprocessing '$(strip $(2))' (USE_ASTYLE=$(USE_ASTYLE)):)
  $(file >> $(1), *  $(CC) -E)
  $(foreach f, $(CFLAGS) $(d1PP), $(file >> $(1), *  $(f)))
  $(file >> $(1), *---------------------------------------------------------)
  $(file >> $(1), * Try to compile this output.)
  $(file >> $(1), */)
  $(_CC) -E @$(CC).args $(d1PP) $(2) | $(PYTHON) $(OBJ_DIR)/cpp-filter.py $(C_FORMATER) >> $(1)
endef

#
# No doxygen tags in these:
#
DOXY_SOURCES = $(filter-out externals/sqlite3.c            \
                            $(CURSES_ROOT)/amalgamation.c, \
                            $(SOURCES))

DOXY_SOURCES := $(addprefix ../, $(DOXY_SOURCES))

DOXY_HEADERS = ../aircraft.h                  \
               ../airports.h                  \
               ../cfg_file.h                  \
               ../convert.h                   \
               ../cpr.h                       \
               ../csv.h                       \
               ../crc.h                       \
               ../demod.h                     \
               ../dump1090_config.h           \
               ../fifo.h                      \
               ../geo.h                       \
               ../interactive.h               \
               ../location.h                  \
               ../misc.h                      \
               ../net_io.h                    \
               ../routes.h                    \
               ../sdrplay.h                   \
               ../smartlist.h                 \
               ../speech.h                    \
               ../externals/rtl-sdr/rtl-sdr.h \
               ../externals/rtl-sdr/rtl-tcp.h \
               ../externals/zip.h

define DUMP1090_DOXYFILE
  PROJECT_NAME          = "Dump1090"
  PROJECT_LOGO          = ../dump1090.ico
  STRIP_FROM_PATH       = $(CURDIR)/
  OPTIMIZE_OUTPUT_FOR_C = yes
  FORCE_LOCAL_INCLUDES  = yes
  QUIET                 = yes
  PREDEFINED            = __DOXYGEN__:=1 _WIN32:=1 _Printf_format_string_:=1
  INPUT                 = $(DOXY_SOURCES) \
                          $(DOXY_HEADERS)

  EXAMPLE_PATH          = ..
  IMAGE_PATH            = .. ../.. ../../docs ../../img
  INLINE_SIMPLE_STRUCTS = yes
  SOURCE_BROWSER        = yes
  CALL_GRAPH            = yes
  CALLER_GRAPH          = yes
  EXTRACT_STATIC        = yes
  HAVE_DOT              = yes
  OUTPUT_DIRECTORY      = $(CURDIR)/doxy-docs
  HTML_OUTPUT           = .
  HTML_DYNAMIC_MENUS    = no
  HTML_COLORSTYLE       = light
  HTML_COPY_CLIPBOARD   = no
  GENERATE_HTMLHELP     = yes
  GENERATE_LATEX        = no
  GENERATE_TREEVIEW     = no
  SEARCHENGINE          = no
  WARNINGS              = yes
  WARN_LOGFILE          = $(CURDIR)/doxy-docs/doxygen.log
  CHM_FILE              = dump1090.chm
endef

define web_pages_RC
  #include <winver.h>
  #include "dump1090_config.h"

  VS_VERSION_INFO VERSIONINFO
    FILEVERSION     RC_VERSION
    PRODUCTVERSION  RC_VERSION
    FILEFLAGSMASK   0x3FL
    FILEOS          VOS__WINDOWS32
    FILETYPE        VFT_DLL
    FILESUBTYPE     0x0L
    FILEFLAGS       0

  BEGIN
    BLOCK "StringFileInfo"
    BEGIN
      BLOCK "040904b0"
      BEGIN
        VALUE "CompanyName",      "https://github.com/gvanem/Dump1090"
        VALUE "FileDescription",  "Dump1090 bundled web-pages."
        VALUE "FileVersion",      RC_VER_STRING
        VALUE "InternalName",     "Dump1090 web-pages"
        VALUE "LegalCopyright",   "Copyright (c) 2022-$(YEAR) Gisle Vanem"
        VALUE "LegalTrademarks",  "MIT License "
        VALUE "OriginalFilename", "web-pages.dll"
        VALUE "ProductName",      "Dump1090"
        VALUE "ProductVersion",   RC_VER_STRING
      END
    END
  BLOCK "VarFileInfo"
  BEGIN
    VALUE "Translation", 0x409, 1200
  END
  END
endef

define CPP_FILTER_PY
  import sys, os

  empty_lines = 0
  while True:
    line = sys.stdin.readline()
    if not line:
       break
    line = line.rstrip()
    if line == "":
       empty_lines += 1
       continue

    #
    # MSVC or clang-cl 'line' directive
    #
    l = line.lstrip()
    if l.startswith("#line") or l.startswith("# "):
       line = line.replace ("\\\\", "/")

    print (line)

    #
    # Print a newline after a functions or structs
    #
    if l == "}" or l == "};":
       print ("")

  print ("Removed %d empty lines." % empty_lines, file=sys.stderr)
endef

define CHECK_FOR_UNUSED_LIBS_PY
  #
  # Check for unused libraries in a MSVC link .map file.
  # Prints with some colours using 'colorama'.
  #
  import os, sys

  map_file = sys.argv[1]

  class State():
    IDLE   = 0
    UNUSED = 1

  class Color():
    RESET = RED = WHITE = ""

  try:
    from colorama import init, Fore, Style
    init()
    Color.RESET = Style.RESET_ALL
    Color.RED   = Fore.RED + Style.BRIGHT
    Color.WHITE = Fore.WHITE + Style.BRIGHT
  except:
    pass

  def cprint (color, s):
    print ("%s%s%s" % (color, s, Color.RESET))

  def report (unused):
    num = len(unused)
    if num > 0:
       cprint (Color.RED, "%d unused librar%s in %s:" % (num, [ "y", "ies" ][num > 1], map_file))
       for u in unused:
           print ("  " + u)
    cprint (Color.WHITE, "Done.\n")

  def process (state):
    unused_libs = []
    f = open (map_file, "rt")
    lines = f.readlines()
    f.close()
    for l in lines:
        l = l.strip()
        if l == "Unused libraries:":
           state = State.UNUSED
           continue
        if state == State.UNUSED:
           if l == "":
              break
           unused_libs.append (l)
    return unused_libs

  report (process(State.IDLE))
endef

DEP_CFLAGS  = -MM $(filter -D% -I%, $(CFLAGS)) -DDOING_MAKE_DEPEND
DEP_REPLACE = -e 's@\(.*\)\.o: @\n$$(OBJ_DIR)\/\1.obj: @'

#
# Fixed dependencies:
#
$(OBJ_DIR)/misc.obj: dump1090_config.h $(OBJ_DIR)/cflags_$(CC).h $(OBJ_DIR)/ldflags_$(CC).h

ifeq ($(USE_BIN_FILES),1)
  $(OBJ_DIR)/aircraft.obj: $(OBJ_DIR)/gen-code-blocks.c $(BIN_DIR)/gen_data.h
endif

CURSES_SRC = $(addprefix $(CURSES_ROOT)/, \
               addch.c                    \
               addstr.c                   \
               attr.c                     \
               border.c                   \
               bkgd.c                     \
               clear.c                    \
               color.c                    \
               getch.c                    \
               getyx.c                    \
               initscr.c                  \
               inopts.c                   \
               kernel.c                   \
               mouse.c                    \
               move.c                     \
               outopts.c                  \
               overlay.c                  \
               pad.c                      \
               pdcclip.c                  \
               pdcdisp.c                  \
               pdcgetsc.c                 \
               pdckbd.c                   \
               pdcscrn.c                  \
               pdcsetsc.c                 \
               pdcutil.c                  \
               printw.c                   \
               refresh.c                  \
               scroll.c                   \
               slk.c                      \
               touch.c                    \
               util.c                     \
               window.c)

$(OBJ_DIR)/amalgamation.obj: $(CURSES_SRC)
$(OBJ_DIR)/net_io.obj:       client-cert-key.h server-cert-key.h

depend:
	$(call generate, .depend.Windows, #)
	gcc $(DEP_CFLAGS) $(SOURCES) | sed $(DEP_REPLACE) >> .depend.Windows

-include .depend.Windows

